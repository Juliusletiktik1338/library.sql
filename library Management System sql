-- Library Management System Database
-- Created by [Your Name]

-- Database creation
DROP DATABASE IF EXISTS library_db;
CREATE DATABASE library_db;
USE library_db;

-- Tables creation with constraints

-- Members table
CREATE TABLE members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    join_date DATE NOT NULL DEFAULT (CURRENT_DATE),
    membership_status ENUM('active', 'expired', 'suspended') DEFAULT 'active',
    CHECK (email LIKE '%@%.%')
);

-- Books table
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL,
    publisher VARCHAR(100),
    publication_year INT,
    genre VARCHAR(50),
    total_copies INT NOT NULL DEFAULT 1,
    available_copies INT NOT NULL DEFAULT 1,
    CHECK (publication_year BETWEEN 1800 AND YEAR(CURRENT_DATE)),
    CHECK (available_copies <= total_copies)
);

-- Loans table (1-M relationship between members and loans, and books and loans)
CREATE TABLE loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    loan_date DATE NOT NULL DEFAULT (CURRENT_DATE),
    due_date DATE NOT NULL DEFAULT (DATE_ADD(CURRENT_DATE, INTERVAL 14 DAY)),
    return_date DATE,
    status ENUM('active', 'returned', 'overdue') DEFAULT 'active',
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON UPDATE CASCADE,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON UPDATE CASCADE,
    CHECK (due_date > loan_date),
    CHECK (return_date IS NULL OR return_date >= loan_date)
);

-- Fines table (1-1 relationship with loans)
CREATE TABLE fines (
    fine_id INT AUTO_INCREMENT PRIMARY KEY,
    loan_id INT UNIQUE NOT NULL,
    amount DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    payment_status ENUM('paid', 'unpaid') DEFAULT 'unpaid',
    FOREIGN KEY (loan_id) REFERENCES loans(loan_id) ON UPDATE CASCADE
);

-- Reservations table (M-M relationship between members and books)
CREATE TABLE reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    reservation_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'fulfilled', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON UPDATE CASCADE,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON UPDATE CASCADE,
    UNIQUE (book_id, member_id, status) -- Prevents duplicate pending reservations
);

-- Sample data insertion

-- Members
INSERT INTO members (first_name, last_name, email, phone) VALUES
('Julius', 'tiktik', 'julius.tiktik@email.com', '555-0101'),
('Jane', 'Bari', 'jane.bari@email.com', '555-0102'),
('Robert', 'lenakin', 'robert.l@email.com', '555-0103'),
('Amos', 'Jabis', 'amos.jabis@email.com', NULL);

-- Books
INSERT INTO books (isbn, title, author, publisher, publication_year, genre, total_copies, available_copies) VALUES
('978-0061120084', 'To Kill a Mockingbird', 'Harper Lee', 'J. B. Lippincott & Co.', 1960, 'Fiction', 5, 3),
('978-0451524935', '1984', 'George Orwell', 'Secker & Warburg', 1949, 'Dystopian', 3, 2),
('978-0743273565', 'The Great Gatsby', 'F. Scott Fitzgerald', 'Charles Scribner''s Sons', 1925, 'Classic', 4, 4),
('978-0544003415', 'The Hobbit', 'J.R.R. Tolkien', 'Allen & Unwin', 1937, 'Fantasy', 2, 1);

-- Loans
INSERT INTO loans (book_id, member_id, loan_date, due_date, return_date, status) VALUES
(1, 1, '2023-01-15', '2023-01-29', '2023-01-28', 'returned'),
(2, 2, '2023-02-10', '2023-02-24', NULL, 'active'),
(3, 3, '2023-03-05', '2023-03-19', '2023-03-18', 'returned'),
(1, 4, '2023-04-01', '2023-04-15', NULL, 'active');

-- Fines
INSERT INTO fines (loan_id, amount, payment_status) VALUES
(1, 0.00, 'paid'),
(3, 5.50, 'unpaid');

-- Reservations
INSERT INTO reservations (book_id, member_id, status) VALUES
(4, 2, 'pending'),
(2, 3, 'fulfilled'),
(1, 4, 'pending');

-- Update book available copies based on loans
UPDATE books b
SET available_copies = total_copies - (
    SELECT COUNT(*) FROM loans l 
    WHERE l.book_id = b.book_id AND l.status = 'active'
);
